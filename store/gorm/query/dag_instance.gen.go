// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"github.com/shiningrush/fastflow/store/gorm/model"
)

func newDagInstance(db *gorm.DB) dagInstance {
	_dagInstance := dagInstance{}

	_dagInstance.dagInstanceDo.UseDB(db)
	_dagInstance.dagInstanceDo.UseModel(&model.DagInstance{})

	tableName := _dagInstance.dagInstanceDo.TableName()
	_dagInstance.ALL = field.NewField(tableName, "*")
	_dagInstance.ID = field.NewInt64(tableName, "id")
	_dagInstance.UID = field.NewString(tableName, "uid")
	_dagInstance.DagUID = field.NewString(tableName, "dag_uid")
	_dagInstance.Trigger = field.NewString(tableName, "trigger")
	_dagInstance.Worker = field.NewString(tableName, "worker")
	_dagInstance.Vars = field.NewString(tableName, "vars")
	_dagInstance.Status = field.NewString(tableName, "status")
	_dagInstance.Reason = field.NewString(tableName, "reason")
	_dagInstance.Cmd = field.NewString(tableName, "cmd")
	_dagInstance.CreatedAt = field.NewTime(tableName, "created_at")
	_dagInstance.UpdatedAt = field.NewTime(tableName, "updated_at")

	_dagInstance.fillFieldMap()

	return _dagInstance
}

type dagInstance struct {
	dagInstanceDo dagInstanceDo

	ALL       field.Field
	ID        field.Int64
	UID       field.String
	DagUID    field.String
	Trigger   field.String
	Worker    field.String
	Vars      field.String
	Status    field.String
	Reason    field.String
	Cmd       field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (d dagInstance) Table(newTableName string) *dagInstance {
	d.dagInstanceDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dagInstance) As(alias string) *dagInstance {
	d.dagInstanceDo.DO = *(d.dagInstanceDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dagInstance) updateTableName(table string) *dagInstance {
	d.ALL = field.NewField(table, "*")
	d.ID = field.NewInt64(table, "id")
	d.UID = field.NewString(table, "uid")
	d.DagUID = field.NewString(table, "dag_uid")
	d.Trigger = field.NewString(table, "trigger")
	d.Worker = field.NewString(table, "worker")
	d.Vars = field.NewString(table, "vars")
	d.Status = field.NewString(table, "status")
	d.Reason = field.NewString(table, "reason")
	d.Cmd = field.NewString(table, "cmd")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")

	d.fillFieldMap()

	return d
}

func (d *dagInstance) WithContext(ctx context.Context) *dagInstanceDo {
	return d.dagInstanceDo.WithContext(ctx)
}

func (d dagInstance) TableName() string { return d.dagInstanceDo.TableName() }

func (d dagInstance) Alias() string { return d.dagInstanceDo.Alias() }

func (d *dagInstance) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dagInstance) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 11)
	d.fieldMap["id"] = d.ID
	d.fieldMap["uid"] = d.UID
	d.fieldMap["dag_uid"] = d.DagUID
	d.fieldMap["trigger"] = d.Trigger
	d.fieldMap["worker"] = d.Worker
	d.fieldMap["vars"] = d.Vars
	d.fieldMap["status"] = d.Status
	d.fieldMap["reason"] = d.Reason
	d.fieldMap["cmd"] = d.Cmd
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
}

func (d dagInstance) clone(db *gorm.DB) dagInstance {
	d.dagInstanceDo.ReplaceDB(db)
	return d
}

type dagInstanceDo struct{ gen.DO }

func (d dagInstanceDo) Debug() *dagInstanceDo {
	return d.withDO(d.DO.Debug())
}

func (d dagInstanceDo) WithContext(ctx context.Context) *dagInstanceDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dagInstanceDo) Clauses(conds ...clause.Expression) *dagInstanceDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dagInstanceDo) Returning(value interface{}, columns ...string) *dagInstanceDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dagInstanceDo) Not(conds ...gen.Condition) *dagInstanceDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dagInstanceDo) Or(conds ...gen.Condition) *dagInstanceDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dagInstanceDo) Select(conds ...field.Expr) *dagInstanceDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dagInstanceDo) Where(conds ...gen.Condition) *dagInstanceDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dagInstanceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *dagInstanceDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dagInstanceDo) Order(conds ...field.Expr) *dagInstanceDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dagInstanceDo) Distinct(cols ...field.Expr) *dagInstanceDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dagInstanceDo) Omit(cols ...field.Expr) *dagInstanceDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dagInstanceDo) Join(table schema.Tabler, on ...field.Expr) *dagInstanceDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dagInstanceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *dagInstanceDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dagInstanceDo) RightJoin(table schema.Tabler, on ...field.Expr) *dagInstanceDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dagInstanceDo) Group(cols ...field.Expr) *dagInstanceDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dagInstanceDo) Having(conds ...gen.Condition) *dagInstanceDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dagInstanceDo) Limit(limit int) *dagInstanceDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dagInstanceDo) Offset(offset int) *dagInstanceDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dagInstanceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *dagInstanceDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dagInstanceDo) Unscoped() *dagInstanceDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dagInstanceDo) Create(values ...*model.DagInstance) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dagInstanceDo) CreateInBatches(values []*model.DagInstance, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dagInstanceDo) Save(values ...*model.DagInstance) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dagInstanceDo) First() (*model.DagInstance, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DagInstance), nil
	}
}

func (d dagInstanceDo) Take() (*model.DagInstance, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DagInstance), nil
	}
}

func (d dagInstanceDo) Last() (*model.DagInstance, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DagInstance), nil
	}
}

func (d dagInstanceDo) Find() ([]*model.DagInstance, error) {
	result, err := d.DO.Find()
	return result.([]*model.DagInstance), err
}

func (d dagInstanceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DagInstance, err error) {
	buf := make([]*model.DagInstance, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dagInstanceDo) FindInBatches(result *[]*model.DagInstance, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dagInstanceDo) Attrs(attrs ...field.AssignExpr) *dagInstanceDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dagInstanceDo) Assign(attrs ...field.AssignExpr) *dagInstanceDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dagInstanceDo) Joins(fields ...field.RelationField) *dagInstanceDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dagInstanceDo) Preload(fields ...field.RelationField) *dagInstanceDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dagInstanceDo) FirstOrInit() (*model.DagInstance, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DagInstance), nil
	}
}

func (d dagInstanceDo) FirstOrCreate() (*model.DagInstance, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DagInstance), nil
	}
}

func (d dagInstanceDo) FindByPage(offset int, limit int) (result []*model.DagInstance, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dagInstanceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d *dagInstanceDo) withDO(do gen.Dao) *dagInstanceDo {
	d.DO = *do.(*gen.DO)
	return d
}
