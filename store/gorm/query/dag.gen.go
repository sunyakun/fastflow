// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"github.com/shiningrush/fastflow/store/gorm/model"
)

func newDag(db *gorm.DB) dag {
	_dag := dag{}

	_dag.dagDo.UseDB(db)
	_dag.dagDo.UseModel(&model.Dag{})

	tableName := _dag.dagDo.TableName()
	_dag.ALL = field.NewField(tableName, "*")
	_dag.ID = field.NewInt32(tableName, "id")
	_dag.UID = field.NewString(tableName, "uid")
	_dag.Name = field.NewString(tableName, "name")
	_dag.Desc = field.NewString(tableName, "desc")
	_dag.Cron = field.NewString(tableName, "cron")
	_dag.Vars = field.NewString(tableName, "vars")
	_dag.Status = field.NewString(tableName, "status")
	_dag.CreatedAt = field.NewTime(tableName, "created_at")
	_dag.UpdatedAt = field.NewTime(tableName, "updated_at")

	_dag.fillFieldMap()

	return _dag
}

type dag struct {
	dagDo dagDo

	ALL       field.Field
	ID        field.Int32
	UID       field.String
	Name      field.String
	Desc      field.String
	Cron      field.String
	Vars      field.String
	Status    field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (d dag) Table(newTableName string) *dag {
	d.dagDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dag) As(alias string) *dag {
	d.dagDo.DO = *(d.dagDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dag) updateTableName(table string) *dag {
	d.ALL = field.NewField(table, "*")
	d.ID = field.NewInt32(table, "id")
	d.UID = field.NewString(table, "uid")
	d.Name = field.NewString(table, "name")
	d.Desc = field.NewString(table, "desc")
	d.Cron = field.NewString(table, "cron")
	d.Vars = field.NewString(table, "vars")
	d.Status = field.NewString(table, "status")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")

	d.fillFieldMap()

	return d
}

func (d *dag) WithContext(ctx context.Context) *dagDo { return d.dagDo.WithContext(ctx) }

func (d dag) TableName() string { return d.dagDo.TableName() }

func (d dag) Alias() string { return d.dagDo.Alias() }

func (d *dag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dag) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 9)
	d.fieldMap["id"] = d.ID
	d.fieldMap["uid"] = d.UID
	d.fieldMap["name"] = d.Name
	d.fieldMap["desc"] = d.Desc
	d.fieldMap["cron"] = d.Cron
	d.fieldMap["vars"] = d.Vars
	d.fieldMap["status"] = d.Status
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
}

func (d dag) clone(db *gorm.DB) dag {
	d.dagDo.ReplaceDB(db)
	return d
}

type dagDo struct{ gen.DO }

func (d dagDo) Debug() *dagDo {
	return d.withDO(d.DO.Debug())
}

func (d dagDo) WithContext(ctx context.Context) *dagDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dagDo) Clauses(conds ...clause.Expression) *dagDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dagDo) Returning(value interface{}, columns ...string) *dagDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dagDo) Not(conds ...gen.Condition) *dagDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dagDo) Or(conds ...gen.Condition) *dagDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dagDo) Select(conds ...field.Expr) *dagDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dagDo) Where(conds ...gen.Condition) *dagDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dagDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *dagDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dagDo) Order(conds ...field.Expr) *dagDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dagDo) Distinct(cols ...field.Expr) *dagDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dagDo) Omit(cols ...field.Expr) *dagDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dagDo) Join(table schema.Tabler, on ...field.Expr) *dagDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dagDo) LeftJoin(table schema.Tabler, on ...field.Expr) *dagDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dagDo) RightJoin(table schema.Tabler, on ...field.Expr) *dagDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dagDo) Group(cols ...field.Expr) *dagDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dagDo) Having(conds ...gen.Condition) *dagDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dagDo) Limit(limit int) *dagDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dagDo) Offset(offset int) *dagDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *dagDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dagDo) Unscoped() *dagDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dagDo) Create(values ...*model.Dag) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dagDo) CreateInBatches(values []*model.Dag, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dagDo) Save(values ...*model.Dag) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dagDo) First() (*model.Dag, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dag), nil
	}
}

func (d dagDo) Take() (*model.Dag, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dag), nil
	}
}

func (d dagDo) Last() (*model.Dag, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dag), nil
	}
}

func (d dagDo) Find() ([]*model.Dag, error) {
	result, err := d.DO.Find()
	return result.([]*model.Dag), err
}

func (d dagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dag, err error) {
	buf := make([]*model.Dag, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dagDo) FindInBatches(result *[]*model.Dag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dagDo) Attrs(attrs ...field.AssignExpr) *dagDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dagDo) Assign(attrs ...field.AssignExpr) *dagDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dagDo) Joins(fields ...field.RelationField) *dagDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dagDo) Preload(fields ...field.RelationField) *dagDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dagDo) FirstOrInit() (*model.Dag, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dag), nil
	}
}

func (d dagDo) FirstOrCreate() (*model.Dag, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dag), nil
	}
}

func (d dagDo) FindByPage(offset int, limit int) (result []*model.Dag, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d *dagDo) withDO(do gen.Dao) *dagDo {
	d.DO = *do.(*gen.DO)
	return d
}
